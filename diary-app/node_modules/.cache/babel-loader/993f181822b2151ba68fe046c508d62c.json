{"ast":null,"code":"var _jsxFileName = \"/Users/danielfindlay/Desktop/save/full-projects/diary-app/diary-app/src/pages/Login.js\",\n    _s = $RefreshSig$();\n\nimport useInput from \"../hooks/use-input\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { login } from \"../store/actions/auth-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const checkNull = val => val.trim() !== \"\";\n\n  const {\n    value: emailValue,\n    hasError: emailError,\n    inputValueChangeHandler: emailChangeHandler,\n    inputValueBlurHandler: emailBlurHandler,\n    isValid: emailIsValid\n  } = useInput(checkNull);\n  const {\n    value: passwordValue,\n    hasError: passwordError,\n    inputValueChangeHandler: passwordChangeHandler,\n    inputValueBlurHandler: passwordBlurHandler,\n    isValid: passwordIsValid\n  } = useInput(checkNull);\n  let formValided = true;\n\n  if (emailIsValid && passwordIsValid) {\n    formValided = false;\n  }\n\n  const [loginError, setLoginError] = useState(false);\n\n  const submitHandler = async e => {\n    e.preventDefault();\n    setLoginError(false);\n\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: emailValue,\n          password: passwordValue\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(response.status == 401 ? \"login error\" : \"something went wrong\");\n      }\n\n      const data = await response.json();\n      const expirationTime = new Date(new Date().getTime() + +data.expiresIn * 1000);\n      console.log(data);\n      dispatch(login(expirationTime.toISOString(), data));\n      navigate(\"/\");\n    } catch (e) {\n      setLoginError(true);\n      console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"input-form form-flex\",\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Email:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input-field-text\",\n      type: \"email\",\n      value: emailValue,\n      onChange: emailChangeHandler,\n      onBlur: emailBlurHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), emailError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Email is not vaild\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input-field-text\",\n      type: \"password\",\n      value: passwordValue,\n      onChange: passwordChangeHandler,\n      onBlur: passwordBlurHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), passwordError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Password is not vaild\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: formValided,\n      className: \"btn\",\n      children: \"Log In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), loginError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"username or password is incorrect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"X29DFwlPXUA3NI5g6+PCcp0uWNo=\", false, function () {\n  return [useDispatch, useNavigate, useInput, useInput];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/danielfindlay/Desktop/save/full-projects/diary-app/diary-app/src/pages/Login.js"],"names":["useInput","useState","useDispatch","useNavigate","login","Login","dispatch","navigate","checkNull","val","trim","value","emailValue","hasError","emailError","inputValueChangeHandler","emailChangeHandler","inputValueBlurHandler","emailBlurHandler","isValid","emailIsValid","passwordValue","passwordError","passwordChangeHandler","passwordBlurHandler","passwordIsValid","formValided","loginError","setLoginError","submitHandler","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","email","password","ok","Error","status","data","json","expirationTime","Date","getTime","expiresIn","console","log","toISOString"],"mappings":"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","sourcesContent":["import useInput from \"../hooks/use-input\"\nimport {useState} from \"react\"\nimport {useDispatch} from \"react-redux\"\nimport {useNavigate} from \"react-router-dom\"\nimport {login} from \"../store/actions/auth-actions\"\nconst Login = () => {\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const checkNull = val => val.trim() !== \"\"\n    const {\n        value: emailValue, \n        hasError: emailError,\n        inputValueChangeHandler: emailChangeHandler,\n        inputValueBlurHandler: emailBlurHandler,\n        isValid: emailIsValid\n\n    } \n    = useInput(checkNull)\n    const {\n        value: passwordValue, \n        hasError: passwordError,\n        inputValueChangeHandler: passwordChangeHandler,\n        inputValueBlurHandler: passwordBlurHandler,\n        isValid: passwordIsValid\n    } \n    = useInput(checkNull)\n    let formValided = true\n    if(emailIsValid && passwordIsValid) {\n        formValided = false\n    }\n\n    const [loginError, setLoginError] = useState(false)\n    const submitHandler = async (e) => {\n        e.preventDefault();\n        setLoginError(false)\n        try{\n            const response = await fetch(\"/api/auth/login\", {\n                method: \"POST\",\n                headers: {\"Content-Type\": \"application/json\"},\n                body: JSON.stringify({\n                    email: emailValue,\n                    password: passwordValue,\n                })\n            })\n            if(!response.ok) {\n                throw new Error(response.status == 401 ? \"login error\" : \"something went wrong\")\n            }\n            const data = await response.json()\n            const expirationTime = new Date(\n                new Date().getTime() + +data.expiresIn * 1000\n              );\n              console.log(data)\n                dispatch(login(expirationTime.toISOString(), data))\n                navigate(\"/\")\n        }\n        catch(e){\n            setLoginError(true)\n            console.log(e)\n        }\n    }\n\n    return (\n        <form className=\"input-form form-flex\" onSubmit={submitHandler}>\n            <label>Email:</label>\n            <input className=\"input-field-text\" type=\"email\" value={emailValue} onChange={emailChangeHandler} onBlur={emailBlurHandler}/>\n            {emailError && <p>Email is not vaild</p>}\n            <label>Password</label>\n            <input className=\"input-field-text\"  type=\"password\" value={passwordValue} onChange={passwordChangeHandler} onBlur={passwordBlurHandler}/>\n            {passwordError && <p>Password is not vaild</p>}\n            <button disabled={formValided} className=\"btn\">Log In</button>\n            {loginError && <p>username or password is incorrect</p>}\n        </form>\n    )\n}\nexport default Login\n"]},"metadata":{},"sourceType":"module"}